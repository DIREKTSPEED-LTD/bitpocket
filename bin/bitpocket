#!/bin/bash

export LC_ALL=C # for stable "sort" output

DOTDIR=.bitpocket
CFG_FILE="$DOTDIR/config"
LOCK_FILE="$DOTDIR/lock"
SLOW_SYNC_TIME=10
SLOW_SYNC_FILE="$DOTDIR/slow"

[ -f "$CFG_FILE" ] && . "$CFG_FILE"

function init {
  if [[ -d "$DOTDIR" || -f "$CFG_FILE" ]]; then
    echo "fatal: Current directory already initialized for bitpocket"
    exit 128
  fi

  if [ -z $1 ]; then
    echo "usage: bitpocket init <REMOTE>"
    echo
    echo "<REMOTE> can be local path or host:path"
    exit 128
  fi

  mkdir "$DOTDIR"

  cat <<EOF > "$CFG_FILE"
REMOTE="$1"

# SLOW_SYNC_TIME=10
# SLOW_SYNC_START_CMD="notify-send 'BitPocket sync in progress...'"
# SLOW_SYNC_STOP_CMD="notify-send 'BitPocket sync finished'"

# export RSYNC_RSH="ssh -i .bitpocket/id_rsa"
EOF

  echo "Initialized bitpocket directory at `pwd`"
}

function log {
  assert_dotdir
  tail -f "$DOTDIR/log"
}

function sync {
  assert_dotdir
  acquire_lock

  echo -e "\e[1;32mbitpocket\e[0m started at `date`."
  echo

  # check what has changed
  touch "$DOTDIR/tree-prev"
  find | sort | cut -d '/' -f 2- | grep -v "^\\$DOTDIR" | grep -v '^\.$' > "$DOTDIR/tree-current"

  # prevent bringing back locally deleted files
  comm -23 "$DOTDIR/tree-prev" "$DOTDIR/tree-current" >"$DOTDIR/fetch-exclude"

  # prevent removing new local files
  comm -13 "$DOTDIR/tree-prev" "$DOTDIR/tree-current" >>"$DOTDIR/fetch-exclude"

  # fire off slow sync start notifier in background
  on_slow_sync_start

  # fetch everything new and updated, locally remove files deleted on remote
  rsync -auvzxi --delete --exclude "$DOTDIR" --exclude-from "$DOTDIR/fetch-exclude" $REMOTE/ . || die

  # send new and updated, remotely remove files deleted locally
  rsync -auvzxi --delete --exclude "$DOTDIR" . $REMOTE/ || die

  # fire off slow sync stop notifier in background
  on_slow_sync_stop

  # save tree state for next run
  mv "$DOTDIR/tree-current" "$DOTDIR/tree-prev"

  cleanup
}

function on_slow_sync_start {
  if [ -n "$SLOW_SYNC_START_CMD" ]; then
    rm -rf "$SLOW_SYNC_FILE"
    (sleep $SLOW_SYNC_TIME && touch "$SLOW_SYNC_FILE" && eval "$SLOW_SYNC_START_CMD") &
    disown
    shell_pid=$!
  fi
}

function on_slow_sync_stop {
  if [ -n "$shell_pid" ]; then
    kill $shell_pid &>/dev/null

    if [[ -n "$SLOW_SYNC_STOP_CMD" && -f "$SLOW_SYNC_FILE" ]]; then
      (eval "$SLOW_SYNC_STOP_CMD") &
    fi
  fi
}

function cron {
  DISPLAY=:0.0 sync 2>&1 >>"$DOTDIR/log"
}

function acquire_lock {
  [ -f "$LOCK_FILE" ] && kill -0 $(cat "$LOCK_FILE") &>/dev/null && exit 0
  echo $$ > "$LOCK_FILE"
}

function release_lock {
  rm "$LOCK_FILE"
}

function assert_dotdir {
  if [ ! -d "$DOTDIR" ]; then
    echo "fatal: Not a bitpocket directory"
    exit 128
  fi
}

function cleanup {
  release_lock
}

function die {
  cleanup
  echo "fatal: command failed"
  exit 128
}

if [ "$1" = "init" ]; then
  init $2
elif [ "$1" = "log" ]; then
  log
elif [ "$1" = "cron" ]; then
  cron
else
  sync
fi
